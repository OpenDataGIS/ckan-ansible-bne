- name: Deploy CKAN-spatial server
  hosts: ckan_servers
  become: true
  gather_facts: true

  vars:
    supported_ckan_versions:
      - ckan-2.9.11
      - ckan-2.10.5

  vars_prompt:
    - name: "deployment_action"
      prompt: "Do you want to deploy from scratch or update CKAN? (deploy/update)"
      private: false
      default: "update"

    - name: "ansible_become_password"
      prompt: "Enter your sudo password (or press Enter to proceed without a password)"
      private: true
      default: ""

  pre_tasks:
    - name: Convert deployment action to lower case
      set_fact:
        deployment_action: "{{ deployment_action | lower }}"

    - name: Validate deployment action option
      fail:
        msg: "Invalid deployment action: '{{ deployment_action | lower }}'. Must be 'deploy' or 'update'."
      when: deployment_action not in ['deploy', 'update']

    # Check OS and CKAN version compatibility 
    - name: "Verify distribution: {{ ansible_distribution }}"
      fail:
        msg: "Currently, it only supports CentOS and RedHat distributions."
      when: ansible_distribution | lower not in ['centos', 'redhat']

    - name: "Verify ckan-ansible compatibility with CKAN version: {{ ckan_version }}"
      fail:
        msg: "Unsupported CKAN version: {{ ckan_version }}. Supported versions are: {{ supported_ckan_versions | join(', ') }}."
      when: ckan_version not in supported_ckan_versions

    # Conditional Prompts for Deploy Action
    - name: Prompt for setup_local_solr if deploying from scratch
      pause:
        prompt: "Do you want to setup a local Solr instance with spatial capabilities? (y/n)"
      register: prompt_solr
      when: deployment_action == "deploy"
      no_log: false
      run_once: true

    - name: Set setup_local_solr fact
      set_fact:
        setup_local_solr: "{{ prompt_solr.user_input | default('n') }}"
      when: deployment_action == "deploy"

    - name: Prompt for setup_local_redis if deploying from scratch
      pause:
        prompt: "Do you want to setup a local Redis instance? (y/n)"
      register: prompt_redis
      when: deployment_action == "deploy"
      no_log: false
      run_once: true

    - name: Set setup_local_redis fact
      set_fact:
        setup_local_redis: "{{ prompt_redis.user_input | default('n') }}"
      when: deployment_action == "deploy"

    - name: Prompt for setup_local_ckan_pycsw if updating
      pause:
        prompt: "Do you want to update local ckan-pycsw instance? (y/n)"
      register: prompt_ckan_pycsw
      when: deployment_action == "update"
      no_log: false
      run_once: true

    - name: Set setup_local_ckan_pycsw fact
      set_fact:
        setup_local_ckan_pycsw: "{{ prompt_ckan_pycsw.user_input | default('n') }}"
      when: deployment_action == "update"

    - name: Prompt for always_ckan_origin_code if deploying from scratch
      pause:
        prompt: "Do you want to clean the local CKAN repository ('src/ckan') with the origin? Remove all local changes. (y/n)"
      register: prompt_origin
      when: deployment_action == "deploy"
      no_log: false
      run_once: true

    - name: Set always_ckan_origin_code fact
      set_fact:
        always_ckan_origin_code: "{{ prompt_origin.user_input | default('n') }}"
      when: deployment_action == "deploy"

    # Variables for deployment version
    - name: "Include global variables for all hosts (group_vars/all.yml)"
      include_vars: "inventories/group_vars/all.yml"

    - name: "Include OS-specific variables (os_vars) for OS: {{ ansible_os_family }}-{{ ansible_distribution_major_version }}.{{ ansible_distribution_minor_version }}"
      include_vars: "{{ item }}"
      with_first_found:
        - "inventories/os_vars/{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version }}.{{ ansible_distribution_minor_version }}.yml"
        - "inventories/os_vars/{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version }}.yml"
        - "inventories/os_vars/{{ ansible_os_family | lower }}.yml"

    - name: Set deployment_version_name
      set_fact:
        deployment_version_name: "{{ deployment_version_name_map[inventory_dir | basename] }}"

    - name: "Debug {{ inventory_dir | basename }} deployment version"
      debug:
        msg: "Deployment version is: {{ deployment_version_name }}"

    - name: Ensure ckan-ansible log directory exists
      file:
        path: "{{ ckan_ansible_log_path }}"
        state: directory
        mode: '0777'
      become: true

    - name: "Change owner and group of {{ ckan_ansible_log_path }} to the current user"
      file:
        path: "{{ ckan_ansible_log_path }}"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        recurse: yes
      become: true

    - name: "Check if use_external_postgres_database is true"
      debug:
        msg: "'use_external_postgres_database: true', configuring only the PostgreSQL client to allow connections and validate the existence of the database."
      when: use_external_postgres_database

    - name: "Check for '%' character in sensitive variables"
      assert:
        that:
          - "(ckan_sysadmin_name | default('')) is not regex('%')"
          - "(ckan_sysadmin_password | default('')) is not regex('%')"
          - "(ckan_database.postgres_password | default('')) is not regex('%')"
          - "(ckan_database.ckan_db_password | default('')) is not regex('%')"
          - "(ckan_smtp_password | default('')) is not regex('%')"
          - "(ckan_datastore.datastore_readonly_password | default('')) is not regex('%')"
        fail_msg: "The '%' character is not allowed in sensitive variables as it is an escape character in Ansible."

    # Override Variables for Update Action
    - name: Override setup variables if updating
      set_fact:
        setup_local_solr: "y"
        setup_local_redis: "n"
        always_ckan_origin_code: "y"
      when: deployment_action == "update"

    # Override Variables for Deploy Action
    - name: Override setup variables if updating
      set_fact:
        setup_local_ckan_pycsw: "y"
      when: deployment_action == "deploy"

  roles:
    - { role: common, tags: common, when: 'deployment_action == "deploy"' }
    - { role: database, tags: database, when: 'deployment_action == "deploy"' }
    - { role: solr, tags: solr, when: 'setup_local_solr == "y"' }
    - { role: redis, tags: redis, when: 'setup_local_redis == "y" and deployment_action == "deploy"' }
    - { role: ckan, tags: ckan }
    - { role: ckan_pycsw, tags: ckan_pycsw, when: 'setup_local_ckan_pycsw == "y" or deployment_action == "deploy"' }
    - { role: webserver, tags: webserver }
    - { role: supervisor, tags: supervisor }

  post_tasks:
    - name: "Change owner and group of {{ ckan_virtualenv }} to {{ ckan_user }}"
      file:
        path: "{{ ckan_virtualenv }}"
        owner: "{{ ckan_user }}"
        group: "{{ ckan_group }}"
        recurse: yes
      become: true

    - name: "Change owner and group of {{ ckan_config_dir }} to {{ ckan_user }}"
      file:
        path: "{{ ckan_config_dir }}"
        owner: "{{ ckan_user }}"
        group: "{{ ckan_group }}"
        recurse: yes
      become: true

    # Log package versions of ckan-ansible components and common packages to a file if gather_package_facts is enabled
    - block:
        - name: Gather package facts
          package_facts:

        - name: Get Nginx version
          command: nginx -v
          register: nginx_version_output
          failed_when: false
          changed_when: false

        - name: Extract Nginx version
          set_fact:
            nginx_version: "{{ nginx_version_output.stderr | regex_search('nginx/([0-9.]+)', '\\1') }}"

        - name: Get Supervisor version
          command: supervisord -v
          register: supervisor_version_output
          failed_when: false
          changed_when: false

        - name: Extract Supervisor version
          set_fact:
            supervisor_version: "{{ supervisor_version_output.stdout }}"

        - name: Get pip packages in CKAN virtualenv
          command: "{{ ckan_virtualenv }}/bin/pip list --format=json"
          register: pip_packages_output
          failed_when: false
          changed_when: false

        - name: Convert pip packages output to dictionary
          set_fact:
            ckan_virtualenv_pip_pkgs: "{{ pip_packages_output.stdout | from_json | items2dict(key_name='name', value_name='version') }}"

        - name: Define versions dictionary of ckan-ansible components
          set_fact:
            versions_dict:
              ckan: "{{ ckan_version | string }}"
              ckanext: "{{ ckanext_versions }}"
              ckan-pycsw: "{{ ckan_pycsw_version | string }}"
              postgresql: "{{ postgres_version | string }}"
              solr: "{{ solr_version | string }}"
              supervisor: "{{ supervisor_version | string }}"
              nginx: "{{ nginx_version }}"
              uwsgi: "{{ uwsgi_version | string }}"
              ckan_virtualenv_pip_pkgs: "{{ ckan_virtualenv_pip_pkgs }}"

        - name: Extract formatted date and time
          set_fact:
            formatted_datetime: "{{ ansible_date_time.iso8601 | regex_replace('T', '_') | regex_replace(':', '-') | regex_replace('\\..*', '') }}"

        - name: Save package versions to a file in {{ ckan_ansible_log_path }}
          copy:
            content: "{{ {'common-packages': ansible_facts.packages, 'ckan-ansible-components': versions_dict} | to_nice_json }}"
            dest: "{{ ckan_ansible_log_path }}/{{ inventory_hostname }}_ckan_ansible_pkgs_{{ formatted_datetime }}.json"
            owner: "{{ ckan_user }}"
            group: "{{ ckan_group }}"
            mode: '0644'
      when: gather_package_facts