# Add CKAN sysadmin user
- block:
    - name: Check if CKAN sysadmin user exists
      command: "{{ ckan_virtualenv }}/bin/ckan -c {{ ckan_config_dir }}/ckan.ini user show {{ ckan_sysadmin_name }}"
      register: user_exists
      retries: 5
      delay: 5
      until: user_exists.rc == 0
      ignore_errors: true

    - name: Create CKAN sysadmin user
      command: "{{ ckan_virtualenv }}/bin/ckan -c {{ ckan_config_dir }}/ckan.ini user add {{ ckan_sysadmin_name }} password={{ ckan_sysadmin_password }} email={{ ckan_sysadmin_email }}"
      when: "'User: None' in user_exists.stdout"

    - name: Make CKAN user a sysadmin
      command: "{{ ckan_virtualenv }}/bin/ckan -c {{ ckan_config_dir }}/ckan.ini sysadmin add {{ ckan_sysadmin_name }}"
      when: "'User: None' in user_exists.stdout"
  environment:
    CKAN_SYSADMIN_NAME: "{{ ckan_sysadmin_name }}"
    CKAN_SYSADMIN_PASSWORD: "{{ ckan_sysadmin_password }}"
    CKAN_SYSADMIN_EMAIL: "{{ ckan_sysadmin_email }}"
    CKAN_INI: "{{ ckan_config_dir }}/ckan.ini"

# WTF CSRF token 
- name: Generate 
  command: "{{ ckan_virtualenv }}/bin/ckan config-tool {{ ckan_config_dir }}/ckan.ini 'WTF_CSRF_SECRET_KEY=$(python3 -c \"import secrets; print(secrets.token_urlsafe())\")'"
  become: true

# Beaker session secret and api_token.jwt secret are generated if not set in ckan.ini
- name: Generate beaker.session.secret
  command: '{{ ckan_virtualenv }}/bin/python3 -c "import secrets; print(secrets.token_urlsafe())"'
  register: beaker_session_secret

- name: Set beaker.session.secret in ckan.ini
  lineinfile:
    path: "{{ ckan_config_dir }}/ckan.ini"
    regexp: "^beaker.session.secret = default_secret_change_me"
    line: "beaker.session.secret = {{ beaker_session_secret.stdout }}"
  become: true
  when: beaker_session_secret.rc == 0

- name: Generate api_token.jwt secret
  command: '{{ ckan_virtualenv }}/bin/python3 -c "import secrets; print(\"string:\" + secrets.token_urlsafe())"'
  register: jwt_secret

- name: Set api_token.jwt.encode.secret in ckan.ini
  lineinfile:
    path: "{{ ckan_config_dir }}/ckan.ini"
    regexp: "^api_token.jwt.encode.secret = default_secret_change_me"
    line: "api_token.jwt.encode.secret = {{ jwt_secret.stdout }}"
  become: true
  when: jwt_secret.rc == 0

- name: Set api_token.jwt.decode.secret in ckan.ini
  lineinfile:
    path: "{{ ckan_config_dir }}/ckan.ini"
    regexp: "^api_token.jwt.decode.secret = default_secret_change_me"
    line: "api_token.jwt.decode.secret = {{ jwt_secret.stdout }}"
  become: true
  when: jwt_secret.rc == 0